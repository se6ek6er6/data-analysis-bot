#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import sys
sys.path.append(os.path.abspath(os.path.dirname(__file__)))

from server.analysis import load_data, detect_data_types, process_type
from server.utils import ensure_dir_exists, generate_unique_id

def test_file_processing(file_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print(f"\n{'='*60}")
    print(f"–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–ê: {file_path}")
    print(f"{'='*60}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        df = load_data(file_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        print("\n2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
        data_types = detect_data_types(df)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        test_dir = f"test_output_{generate_unique_id()}"
        ensure_dir_exists(test_dir)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        print(f"\n3. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –≤ –ø–∞–ø–∫–µ: {test_dir}")
        visualizations = process_type(file_path, test_dir)
        
        print(f"\n‚úÖ –£–°–ü–ï–•! –°–æ–∑–¥–∞–Ω–æ {len(visualizations)} –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π:")
        for viz in visualizations:
            print(f"  - {viz.get('type', 'unknown')}: {viz.get('path', 'unknown')}")
            
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    test_files = [
        "test_datasets/test_data.csv",
        "test_datasets/Chocolate Sales.csv", 
        "test_datasets/Chocolate Sales.xlsx",
        "test_datasets/Mobiles Dataset (2025).csv"
    ]
    
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–û–í")
    print("="*60)
    
    results = {}
    
    for file_path in test_files:
        if os.path.exists(file_path):
            results[file_path] = test_file_processing(file_path)
        else:
            print(f"\n‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            results[file_path] = False
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*60}")
    print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*60}")
    
    successful = sum(results.values())
    total = len(results)
    
    for file_path, success in results.items():
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {file_path}")
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{total} —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    if successful == total:
        print("üéâ –í–°–ï –§–ê–ô–õ–´ –û–ë–†–ê–ë–û–¢–ê–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")

if __name__ == "__main__":
    main() 