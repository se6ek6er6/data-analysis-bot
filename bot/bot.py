import telebot
import os
import requests
import json
from bot.config import BOT_TOKEN, SERVER_URL
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def handle_document(message):
    temp_file_name = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        if BOT_TOKEN is None:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        bot = telebot.TeleBot(BOT_TOKEN)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ CSV —Ñ–∞–π–ª
        if not message.document.file_name.endswith(('.csv', '.xls', '.xlsx')):
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV/XLS/XLSX —Ñ–∞–π–ª.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = bot.get_file(message.document.file_id)
        if file_info.file_path is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        temp_file_name = f"temp_{message.document.file_name}"
        with open(temp_file_name, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        bot.send_message(message.chat.id, "üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        with open(temp_file_name, 'rb') as file_to_send:
            try:
                # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                files = {'file': (message.document.file_name, file_to_send)}
                user_data = {'user_id': str(message.from_user.id), 'username': message.from_user.username}
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª {message.document.file_name} –Ω–∞ —Å–µ—Ä–≤–µ—Ä {SERVER_URL}/process")
                response = requests.post(f'{SERVER_URL}/process', files=files, data=user_data, timeout=60)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    try:
                        result = response.json()
                        web_app_url = result.get('web_app_url')
                        analysis_id = result.get('analysis_id')
                        visualizations_count = result.get('visualizations_count', 0)
                        
                        if not web_app_url or not analysis_id:
                            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                        report_url = f"{SERVER_URL}/report/{analysis_id}"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ª–æ–∫–∞–ª—å–Ω—ã–º
                        is_localhost = "localhost" in SERVER_URL or "127.0.0.1" in SERVER_URL
                        
                        if is_localhost:
                            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç–µ
                            markup = None
                            links_text = (
                                f"\n\nüîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—á–µ—Ç:</b>\n"
                                f"üìä <a href='{report_url}'>{report_url}</a>"
                            )
                        else:
                            # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
                            markup = InlineKeyboardMarkup(row_width=1)
                            markup.add(
                                InlineKeyboardButton("üìä –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", url=report_url)
                            )
                            links_text = ""
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        preview_path = None
                        try:
                            analysis_dir = os.path.join("static", "analyses", analysis_id)
                            metadata_path = os.path.join(analysis_dir, "metadata.json")
                            
                            if os.path.exists(metadata_path):
                                with open(metadata_path, "r", encoding="utf-8") as f:
                                    metadata = json.load(f)
                                
                                # –ò—â–µ–º 3D scatter plot –¥–ª—è –ø—Ä–µ–≤—å—é
                                for viz in metadata.get("visualizations", []):
                                    if viz.get("type") == "3d_scatter":
                                        potential_path = os.path.join(analysis_dir, viz["path"])
                                        if os.path.exists(potential_path):
                                            preview_path = potential_path
                                            break
                                
                                # –ï—Å–ª–∏ 3D scatter –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥—Ä–∞—Ñ–∏–∫
                                if not preview_path:
                                    for viz in metadata.get("visualizations", []):
                                        if viz.get("type") in ("distribution", "bar", "correlation", "scatter", "time_series"):
                                            potential_path = os.path.join(analysis_dir, viz["path"])
                                            if os.path.exists(potential_path):
                                                preview_path = potential_path
                                                break
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–≤—å—é: {e}")
                            preview_path = None
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—á–µ—Ç–∞
                        status_text = (
                            f"‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                            f"üìÅ <b>–§–∞–π–ª:</b> {message.document.file_name}\n\n"
                            f"üìù <b>–ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:</b>\n"
                            f"‚Äî –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö\n"
                            f"‚Äî –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π\n"
                            f"‚Äî –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü\n"
                            f"‚Äî –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤ –∏ –∞–Ω–æ–º–∞–ª–∏–π\n"
                            f"‚Äî –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                            f"‚Äî –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏\n\n"
                            f"–û—Ç–∫—Ä–æ–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:{links_text}"
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–µ–≤—å—é –∏–ª–∏ –±–µ–∑
                        if preview_path and os.path.exists(preview_path):
                            try:
                                with open(preview_path, "rb") as img:
                                    bot.send_photo(
                                        message.chat.id, 
                                        img,
                                        caption=status_text,
                                        parse_mode="HTML",
                                        reply_markup=markup
                                    )
                            except Exception as photo_error:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {photo_error}")
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                                bot.send_message(
                                    message.chat.id, 
                                    status_text,
                                    parse_mode="HTML",
                                    reply_markup=markup
                                )
                        else:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
                            bot.send_message(
                                message.chat.id, 
                                status_text,
                                parse_mode="HTML",
                                reply_markup=markup
                            )
                            
                    except json.JSONDecodeError:
                        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                        print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON. –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}")
                        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    except Exception as json_error:
                        # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON: {str(json_error)}")
                        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(json_error)}")
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—à–∏–±–∫–∏
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}"
                    try:
                        if response.text:
                            error_data = response.json()
                            if 'error' in error_data:
                                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n\n–ü—Ä–∏—á–∏–Ω–∞: {error_data['error']}"
                                print(f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_data['error']}")
                    except Exception as error_parse_error:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π: {str(error_parse_error)}")
                        error_msg += f"\n\n–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}"
                        
                    bot.reply_to(message, error_msg)
            except requests.RequestException as req_error:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                error_message = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º:\n{str(req_error)}"
                print(error_message)
                bot.reply_to(message, error_message)
            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
                error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{str(e)}"
                print(error_message)
                import traceback
                traceback.print_exc()
                bot.reply_to(message, error_message)
            
    except Exception as e:
        if BOT_TOKEN is None:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        bot = telebot.TeleBot(BOT_TOKEN)
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        if temp_file_name and os.path.exists(temp_file_name):
            try:
                os.close(os.open(temp_file_name, os.O_RDONLY))  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
                os.remove(temp_file_name)
                print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file_name} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")